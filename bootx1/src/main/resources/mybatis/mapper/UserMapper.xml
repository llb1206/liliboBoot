<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mapper.UserTest">

    <insert id="addUser" parameterType="com.mapper.User">
        insert into user(id,username,sex,birthday,adress) values(#{id},#{username},#{sex},#{birthday},#{adress});
    </insert>

    <select id="sel" resultType="com.mapper.User">
        select  * from user
    </select>
    <!-- trim 很重要！！-->
    <select id="selectUserByUsernameAndSex" resultType="com.mapper.User" parameterType="com.mapper.User">
        select * from user
         <where>
            <if test="username != null">
               username=#{username}
            </if>

            <if test="sex != null">
               and sex=#{sex}
            </if>
        </where>
<!--        <trim prefix="where" prefixOverrides="and | or">-->
<!--            <if test="username != null">-->
<!--                and username=#{username}-->
<!--            </if>-->
<!--            <if test="sex != null">-->
<!--                and sex=#{sex}-->
<!--            </if>-->
<!--        </trim>-->
    </select>
    <select id="selectUserByUsernameAndSex2" resultType="com.mapper.User" parameterType="com.mapper.User">
        select * from user
        <where>
            <if test="username != null ">
                username=#{username}
            </if>

            <if test="sex != null ">
                and sex=#{sex}
            </if>
        </where>
    </select>

    <!-- 有时候，我们不想用到所有的查询条件，只想选择其中的一个，查询条件有一个满足即可，
    使用 choose 标签可以解决此类问题，类似于 Java 的 switch 语句-->
    <select id="selectUserByChoose" resultType="com.mapper.User" parameterType="com.mapper.User">
        select * from user
        <where>
            <choose>
                <when test="id !='' and id != null">
                    id=#{id}
                </when>
                <when test="username !='' and username != null">
                    and username=#{username}
                </when>
                <otherwise>
                    and sex=#{sex}
                </otherwise>
            </choose>
        </where>
    </select>
    <update id="updateUserById" parameterType="com.mapper.User">
        update user u
         <set>
            <if test="username != null and username != ''">
                u.username = #{username},
            </if>
            <if test="sex != null and sex != ''">
                u.sex = #{sex}
            </if>
        </set>
        <!--      trim 去掉前缀and或者or-->
    <!--        <trim prefix="set" suffixOverrides=",">-->
<!--            <if test="username != null and username != ''">-->
<!--                u.username = #{username},-->
<!--            </if>-->
<!--            <if test="sex != null and sex != ''">-->
<!--                u.sex = #{sex},-->
<!--            </if>-->
<!--        </trim>-->

        where id=#{id}
    </update>

    <!-- 定义 sql 片段 -->
    <sql id="selectUserByUserNameAndSexSQL">
        <if test="username != null and username != ''">
            AND username = #{username}
        </if>
        <if test="sex != null and sex != ''">
            AND sex = #{sex}
        </if>
    </sql>

    <select id="selectUserByUsernameAndSex22" resultType="com.mapper.User" parameterType="com.mapper.User">
        select * from user
        <trim prefix="where" prefixOverrides="and | or">
            <!-- 引用 sql 片段，如果refid 指定的不在本文件中，那么需要在前面加上 namespace -->
            <include refid="selectUserByUserNameAndSexSQL"></include>
            <!-- 在这里还可以引用其他的 sql 片段 -->
        </trim>
    </select>

    <select id="selectUserByListId" parameterType="Integer" resultType="com.mapper.User">
        select * from user
        <where>
            <!--
                collection:指定输入对象中的集合属性
                item:每次遍历生成的对象
                open:开始遍历时的拼接字符串
                close:结束时拼接的字符串
                separator:遍历对象之间需要拼接的字符串
                select * from user where 1=1 and id in (1,2,3)
              -->
            <foreach collection="ids" item="id" open="and id in (" close=") " separator=",">
                #{id}
            </foreach>
        </where>
    </select>
    <resultMap id="sAassociation" type="com.mapper.banjiA">
        <id column="did" property="id"></id><!--resultMap="sCollection"对应上  两个id起别名 -->
        <result column="name" property="name"></result>
        <association property="user" javaType="com.mapper.User"><!--association对应javaType 不是type -->
            <id column="uid" property="id"></id>
            <result column="username" property="username"></result>
            <result column="sex" property="sex"></result>
            <result column="birthday" property="birthday"></result>
            <result column="adress" property="adress"></result>
        </association>
    </resultMap><!--resultMap="sCollection"对应上  两个id起别名 -->
    <select id="selAassociation" resultMap="sAassociation">
  select  a.id did ,a.name name ,b.id uid ,b.username username ,b.sex sex ,b.birthday birthday,b.adress adress
         from banji a ,user b where   a.id = b.bid and a.id = #{id};
    </select>
    <resultMap id="sCollection" type="com.mapper.banjiC">
        <id column="did" property="id"></id><!--resultMap="sCollection"对应上  两个id起别名 -->
        <result column="name" property="name"></result>
        <collection property="users" ofType="com.mapper.User">
            <id column="uid" property="id"></id>
            <result column="username" property="username"></result>
            <result column="sex" property="sex"></result>
            <result column="birthday" property="birthday"></result>
            <result column="adress" property="adress"></result>
        </collection>
    </resultMap><!--resultMap="sCollection"对应上  两个id起别名 -->
    <select id="selCollection" resultMap="sCollection" parameterType="int">
        select  a.id did ,a.name name ,b.id uid ,b.username username ,b.sex sex ,b.birthday birthday,b.adress adress
         from banji a left join user b on  a.id = b.bid and a.id = #{id};
    </select>

    <insert id="batchSave">

        insert into user(emp_name,emp_email,dept_id) VALUES
        <foreach collection="list" item="emp" separator=",">
            (#{emp.empName}, #{emp.empEmail}, #{emp.deptId})
        </foreach>
    </insert>

</mapper>
 